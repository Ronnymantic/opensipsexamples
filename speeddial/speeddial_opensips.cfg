# ----------- global configuration parameters ------------------------

check_via=no    # (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)

children=4
debug_mode=no

listen=udp:10.130.74.215:5060 
# ------------------ module loading ----------------------------------

#mpath="/usr/local/lib/opensips/modules"
mpath= "/home/ubuntu/opensips/altanaicustom4/lib64/opensips/modules/"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "db_text.so"
#loadmodule "mysql.so"
loadmodule "speeddial.so"
loadmodule "mi_fifo.so"
loadmodule "proto_udp.so"

# ----------------- setting module-specific parameters ---------------

# -- mi_fifo params --
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

# -- usrloc params --
modparam("usrloc", "db_url", "text:///etc/opensips/dbtext")
modparam("usrloc", "db_mode", 0)

# -- dbtext param--
# caching mode (0) or non-caching mode (1).
modparam("db_text", "db_mode", 1)

# -- speed dial --
modparam("speeddial", "db_url", "text:///etc/opensips/dbtext")

# -------------------------  request routing logic -------------------

# main routing logic
route{

        # initial sanity checks 
        if (!mf_process_maxfwd_header("10"))
        {
                sl_send_reply("483","Too Many Hops");
                exit;
        };

        xlog("check message length $ml \n");
        if ($ml >=  65535 )
        {
                sl_send_reply("513", "Message too big");
                exit;
        };

        xlog("preloaded route checking \n ");
        if (loose_route()){
                xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
                if (!t_relay())
                {
                        sl_reply_error();
                };
                exit;
        };
       xlog(" request methods $rm \n");
        if (!$rm=="REGISTER") record_route();

        xlog(" to prevent rebounce , check if uri is meant for this server \n ");
        #if (!is_myself("$rd"))
        if (!uri==myself)
        {
                xlog(" Request URI is not this Server \n");
                if (!t_relay())
                {
                        sl_reply_error();
                };
                exit;
        };

        #if (is_myself("$rd"))
        if (uri==myself)
        {
                xlog(" Request URI is this Server, proceed with sd_lookuuup \n");
                if ($rm=="REGISTER")
                {
                        save("location");
                        exit;
                };

                xlog("request URI $ru \n");
                if($ru=~"sip:[0-9]{2}@.*"){
                        # lookup address from R-URI and replace
                        sd_lookup("speeddial");
                }

                lookup("aliases");
                if(!uri==myself)
                #if (!is_myself("$rd"))
                {
                        if (!t_relay())
                        {
                                sl_reply_error();
                        };
                        exit;
                };

                if (!lookup("location"))
                {
                        sl_send_reply("404", "Not Found");
                        exit;
                };
        };

        xlog(" uri cases match , not match not meet \n");
        if (!t_relay())
        {
                sl_reply_error();
        };
}
                                                                                                                                                                                                                                                              