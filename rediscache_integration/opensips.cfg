
####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4
# DEBUG stdout
#log_stderror=yes
#debug_mode=true
#log_level=6

listen=udp:eth0:5060
listen=tcp:eth0:5060
advertised_address=<public_ip>
advertised_port=5060
alias=<public_ip>

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### Redis module
loadmodule "cachedb_redis.so"
modparam("cachedb_redis", "cachedb_url", "redis://<redis_ip>:6379/")
modparam("cachedb_redis", "connect_timeout",1000)
modparam("cachedb_redis", "query_timeout",1000)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### UNIX/UDP SOCKET transport layer implementation for the Management Interface
loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "/var/run/opensips/socket")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

loadmodule "avpops.so"
loadmodule "textops.so"
loadmodule "cfgutils.so"
loadmodule "json.so"
loadmodule "db_text.so"
modparam("db_text", "db_mode", 1)
loadmodule "dispatcher.so"

loadmodule "dialog.so"
loadmodule "exec.so"
loadmodule "regex.so"

modparam("tm", "onreply_avp_mode", 1)
# AVP timer
modparam("tm", "restart_fr_on_each_reply", 1)

# exec
modparam("exec", "setvars", 1)
modparam("exec", "time_to_kill", 5)

route {

    if (!mf_process_maxfwd_header("20")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if ($ua=~"friendly-scanner"){
        xlog("L_NOTICE","Auth error for $fU@$fd from $Ri cause $var(auth_code)");
        xlog("FRIENDLY-SCANNER: UA: $ua From_TAG: $ft From_URI: $fu Received IP: $Ri IP Source: $si");
        exit;
    }

    if (!has_totag()) {
        # initial request  
        # add a new Record-Route header field. 
        record_route();
    } else {

    	# loose_route - route in-dialog requests (like ACK, BYE, reINVITE) 
    	# also out-of-dialog requests having pre-loaded route set
    	# translating between strict-routers and loose-router
        if (loose_route()) {
			if (is_method("BYE")) {
				xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
				$avp(can_uri) = $ru;
				t_relay();
				exit;
			}
            if (is_method("INVITE|UPDATE|ACK")) {
                xlog("L_INFO", "CALL INVITE/UPDATE $ci loose route from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
		} else {
			if (is_method("ACK")) {
				if (t_check_trans()) {
					xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
					t_relay();
					exit;
				} else {
					xlog("L_INFO", "CALL ACK $ci without session from $pr sip:$si:$sp\n");
					exit;
				}
			}
		}
    }


    # CANCEL and re-transmissions
    if (is_method("CANCEL")) {
        xlog("L_INFO", "CANCELLED $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # ACK and re-transmissions
    if (is_method("ACK")) {
        xlog("L_INFO", "ACK $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # SIP OPTION
    if (is_method("OPTIONS")) {
        xlog("L_INFO", "OPTIONS from $pr sip:$si:$sp - replying 200 OK");
        sl_send_reply("200", "OK");
        exit;
    }

    # SIP INFO 
    if (is_method("INFO")) {
        xlog("L_INFO", "INFO from $pr sip:$si:$sp");
        t_relay();
        exit;
    }

    # INVITE 
    if (is_method("INVITE")) {
        xlog("L_INFO", "NEW CALL - INITIAL INVITE $ci FROM $pr sip:$si:$sp\n");

        # Permission checks for source 
        if (check_address("2", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "carrier")) {
            xlog("L_INFO", "<<< INBOUND CALL $ci - CARRIER $pr sip:$si:$sp - FROM $fu - TO $tu\n");
            route(INBOUND);

        # others sources of INVITE are forbidden
        } else {
            xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
            sl_send_reply("403", "Forbidden");
            exit;
        }

    # other methods are forbidden
    } else {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("405","Method Not Allowed");
        exit;
    }

    # Route request
    if (!t_relay()) {
        xlog("L_ERR", "CALL $ci - Relay error\n");
        sl_reply_error();
        exit;
    }
}



# ROUTE - INBOUND 
route[INBOUND] {
    xlog("L_INFO", "<<< INBOUND CALL $ci - Check Dispatcher\n");
    t_on_reply("INBOUND"); # Arm reply route
    # strip +
    if($rU =~ "^\+.*" )
        $rU=$(rU{s.substr,1,0});

    exec_avp("/etc/opensips/custom_route.sh $rU $si", "$avp(dsid)");

    if (pcre_match("$avp(dsid)", "^rU:")) {
        $var(destination) = $avp(dsid);
        $avp(dsid) = "0"; #use default dispatcher
        $var(oldrU) = $rU;
        $rU=$(var(destination){s.substr,3,0}); #change $rU
        append_hf("X-PH-OriginalTo: $var(oldrU)\r\n");
        xlog("L_INFO", "<<< INBOUND CALL $ci - Changing destination from $var(oldrU) to $rU\n");
    }

    if (($avp(dsid) == "0") || ($avp(dsid) == null)) {
        $avp(trunk_service_url) = "https://staging-trunk-use1.zt.plivops.com/zt/trunk/didmappings?didnumber="+$rU;
        $avp(dsid) = "2";
        route(ZENTRUNK_INBOUND);
    } else {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Found Custom Dispatcher $avp(dsid) for $rU\n");
    }
    route(INBOUND_MEDIASERVER);
}
