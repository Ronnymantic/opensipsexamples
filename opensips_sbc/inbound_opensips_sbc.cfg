####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4
# DEBUG stdout
#log_stderror=yes
#debug_mode=true
#log_level=6

listen=udp:eth0:5060
listen=tcp:eth0:5060
advertised_address=<%= @public_ip %>
advertised_port=5060
alias=<%= @public_ip %>

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "pass_provisional_replies", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### SIPmsg OPerationS module
loadmodule "sipmsgops.so"

loadmodule "avpops.so"
loadmodule "textops.so"
loadmodule "cfgutils.so"
loadmodule "json.so"
loadmodule "db_text.so"
modparam("db_text", "db_mode", 1)
loadmodule "dispatcher.so"
loadmodule "permissions.so"
loadmodule "dialog.so"
loadmodule "exec.so"
loadmodule "regex.so"

modparam("tm", "pass_provisional_replies", 1)

modparam("permissions", "db_url", "text:///etc/opensips/dbtext")
modparam("dispatcher", "db_url", "text:///etc/opensips/dbtext")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:$pr:ping@<%= root_domain %>")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 20)
modparam("dispatcher", "ds_probing_threshhold", 2)

modparam("tm", "onreply_avp_mode", 1)
# AVP timer
modparam("tm", "restart_fr_on_each_reply", 1)

# exec
modparam("exec", "setvars", 1)
modparam("exec", "time_to_kill", 5)


route {
    
    if (!mf_process_maxfwd_header("20")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if ($ua=~"friendly-scanner"){
        xlog("L_NOTICE","Auth error for $fU@$fd from $Ri cause $var(auth_code)");
        xlog("FRIENDLY-SCANNER: UA: $ua From_TAG: $ft From_URI: $fu Received IP: $Ri IP Source: $si");
        exit;
    }

    if (!(method =~ "^(OPTIONS|NOTIFY|SUBSCRIBE)$")) {
        setflag(22);
    }

    if (!has_totag()) {
        # initial request
        record_route();
    } else {
        # sequential request - follow indicated route
        if (loose_route()) {
			if (is_method("BYE")) {
				xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
				$avp(can_uri) = $ru;
				t_relay();
				exit;
			}
            if (is_method("INVITE|UPDATE|ACK")) {
                xlog("L_INFO", "CALL INVITE/UPDATE $ci loose route from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
		} else {
			if (is_method("ACK")) {
				if (t_check_trans()) {
					xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
					t_relay();
					exit;
				} else {
					xlog("L_INFO", "CALL ACK $ci without session from $pr sip:$si:$sp\n");
					exit;
				}
			}
		}
    }

    if (is_method("CANCEL")) {
        xlog("L_INFO", "CALL CANCELLED $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    if (is_method("ACK")) {
        xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    if (is_method("OPTIONS")) {
        xlog("L_INFO", "Got OPTIONS from $pr sip:$si:$sp - replying 200 OK");
        sl_send_reply("200", "OK");
        exit;
    }

    if (is_method("MESSAGE")) {
        xlog("L_INFO", "NEW MESSAGE - $ci FROM $pr sip:$si:$sp\n");
        if (check_address("3", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "carriermessage")) {
            t_on_reply("INBOUND_MESSAGE"); # re-arm reply route
            route(INBOUND_MESSAGE);
            exit;
       }
    }

    if (is_method("INFO")) {
        xlog("L_INFO", "Got INFO from $pr sip:$si:$sp");
        t_relay();
        exit;
    }

    # INVITE method
    if (is_method("INVITE")) {
        xlog("L_INFO", "NEW CALL - INITIAL INVITE $ci FROM $pr sip:$si:$sp\n");

        if (check_address("1500", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "customer")) {
        	# optional can do test on DID ( Direct Inbound number ) to find its validity 
        }

        if (check_address("2", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "carrier")) {
            xlog("L_INFO", "<<< INBOUND CALL $ci - CARRIER $pr sip:$si:$sp - FROM $fu - TO $tu\n");
            route(INBOUND);
        # others sources of INVITE are forbidden
        } else {
            xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
            sl_send_reply("403", "Forbidden");
            exit;
        }

    # REGISTER method
    } else if (is_method("REGISTER")) {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("503","Service Unavailable");
        exit;

    # other methods are forbidden
    } else {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("405","Method Not Allowed");
        exit;
    }

    # Route request
    if (!t_relay()) {
        xlog("L_ERR", "CALL $ci - Relay error\n");
        sl_reply_error();
        exit;
    }
}

# ROUTE FOR INBOUND CALLS
route[INBOUND] {
    xlog("L_INFO", "<<< INBOUND CALL $ci - Check Dispatcher\n");
    t_on_reply("INBOUND"); # Arm reply route

    # strip + symbol added before numbers 
    if($rU =~ "^\+.*" )
        $rU=$(rU{s.substr,1,0});
    
    $ru = "sip:"+$rU+"@company.com";
    append_hf("X-CAllDirection: inbound\r\n");
    $T_fr_timeout = 10;

    if (!t_relay()) {
    	xlog("L_ERR", "CALL $ci - Relay error\n");
    	sl_reply_error();
    	exit;
    }
}


# REPLY ROUTE FOR INBOUND CALLS ie reply coming from cutomer to external world 
onreply_route[INBOUND] {
    # remove custom headers before sending to external world
    remove_hf("^X-*", "r");

    # case state 100 Trying, set pdd timer
    if ( t_check_status("100") ) {
        # set try timeout to 10 seconds
        xlog("L_INFO", "INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp - set FR timer to 10s \n");
        $T_fr_timeout = 10;
    
    # case state 180, reset timer
    } else if (t_check_status("18[0-9]")) {
        xlog("L_INFO", "INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp - set FR timer to 120s\n");
        $T_fr_timeout = 120;
    
    # case 200, remove Remote-Party-ID (some ULC are buggy)
    } else if ( t_check_status("200") ) {
        xlog("L_INFO", "INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp\n");
        remove_hf("Remote-Party-ID");
    
    # case 2XX to 5XX
    } else if ( t_check_status("[2-5][0-9][0-9]") ) {
        xlog("L_INFO", "INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp\n");
    }
    return;
}


# REPLY ROUTE FOR INBOUND MESSAGES
onreply_route[INBOUND_MESSAGE]
{
    xlog("L_INFO", "INBOUND MESSAGE $ci - Got $rs $rr\n");
}


# GLOBAL ERROR ROUTE
error_route {
    xlog("Error route class=$(err.class) level=$(err.level) info=$(err.info) rcode=$(err.rcode) rreason=$(err.rreason) ---\n");
    xlog("Error from [$si:$sp]\n+++++\n$mb\n++++\n");
    sl_send_reply("$err.rcode", "$err.rreason");
    exit;
}