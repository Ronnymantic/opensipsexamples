####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

#set listen addresses
listen=udp:eth0:5060
listen=tcp:eth0:5060
advertised_address="<public_ip>"
advertised_port=5060
alias=public_ip

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

# set SIGNALING 
loadmodule "signaling.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

# StateLess module
loadmodule "sl.so"

# Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "pass_provisional_replies", 1)

# Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 1)

# MAX ForWarD module
loadmodule "maxfwd.so"

# SIP MSG OPerationS module
loadmodule "sipmsgops.so"

# FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "/var/run/opensips/socket")

# URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0

# USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

# REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

loadmodule "avpops.so"
loadmodule "textops.so"
loadmodule "cfgutils.so"
loadmodule "json.so"

loadmodule "dialog.so"

modparam("tm", "pass_provisional_replies", 1)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "restart_fr_on_each_reply", 1)



server_header="Server: Telephony service "
server_signature=no

route {
    if (!mf_process_maxfwd_header("20")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if ($ua=~"friendly-scanner"){
        xlog("L_NOTICE","Auth error for $fU@$fd from $Ri cause $var(auth_code)");
        xlog("FRIENDLY-SCANNER: UA: $ua From_TAG: $ft From_URI: $fu Received IP: $Ri IP Source: $si");
        exit;
    }

    if (!(method =~ "^(OPTIONS|NOTIFY|SUBSCRIBE)$")) {
        setflag(22);
    }

    if (!has_totag()) {
        # initial request
        record_route();
    } else {
        # sequential request - follow the set route
        if (loose_route()) {
            if (is_method("BYE")) {
                xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
            if (is_method("INVITE|UPDATE|ACK")) {
                xlog("L_INFO", "CALL INVITE/UPDATE $ci loose route from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
        } else {
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
                    t_relay();
                    exit;
                } else {
                    xlog("L_INFO", "CALL ACK $ci without session from $pr sip:$si:$sp\n");
                    exit;
                }
            }
        }
    }

    # handle cancel and re-transmissions
    if (is_method("CANCEL")) {
        xlog("L_INFO", "CALL CANCELLED $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle ack and re-transmissions
    if (is_method("ACK")) {
        xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle options with 200 OK reply
    if (is_method("OPTIONS")) {
        xlog("L_INFO", "Got OPTIONS from $pr sip:$si:$sp - replying 200 OK");
        sl_send_reply("200", "OK");
        exit;
    }


    # handle SIP INFO for DTMFs
    if (is_method("INFO")) {
        xlog("L_INFO", "Got INFO from $pr sip:$si:$sp");
        t_relay();
        exit;
    }

    # INVITE method
    if (is_method("INVITE")) {
        xlog("L_INFO", "Initial INVITE $ci FROM $pr sip:$si:$sp\n");
        xlog("L_INFO", "CALL $ci - from $pr sip:$si:$sp - FROM $fu - TO $tu\n");
        route(INCOMINGCALL);

    # REGISTER method
    } else if (is_method("REGISTER")) {
        xlog("L_ERR", "Method $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("503","Service Unavailable");
        exit;

    # other methods are forbidden
    } else {
        xlog("L_ERR", "Method $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("405","Method Not Allowed");
        exit;
    }

    # Route request
    if (!t_relay()) {
        xlog("L_ERR", "CALL $ci - Relay error\n");
        sl_reply_error();
        exit;
    }
}


# ROUTE FOR INCOMINGCALL
route[INCOMINGCALL] {
    xlog("L_INFO", " INBOUND CALL $ci \n");
    #t_on_reply("INBOUND"); # route block on reply
    xlog("L_INFO", "destination $rU\n");
    #append some headers 
    append_hf("Random-Header: someval\r\n");
    route(INCOMINGCALL_RELAY);
}

# relay route for INCOMINGCALL
route[INCOMINGCALL_RELAY]
{
    if (!t_relay()) {
            xlog("L_ERR", "CALL $ci - Relay error\n");
            sl_reply_error();
            exit;
    }
}

# REPLY ROUTE FOR INCOMINGCALL
onreply_route[INCOMINGCALL] {
    # remove the custom headers 
    remove_hf("^Random-Header*", "r");

    # case state 100 Trying, set Post dial delay / pdd timer , 10 seconds
    if ( t_check_status("100") ) {
        # set try timeout to 10 seconds
        xlog("L_INFO", " CALL $ci - Reply status $rs $rr from $pr sip:$si:$sp - set FR timer to 10s \n");
        $T_fr_timeout = 10;
    
    # case state 180, reset timer , 120 seconds
    } else if (t_check_status("18[0-9]")) {
        xlog("L_INFO", "CALL $ci - Reply status $rs $rr from $pr sip:$si:$sp - set FR timer to 120s\n");
        $T_fr_timeout = 120;
    
    # case 200
    } else if ( t_check_status("200") ) {
        xlog("L_INFO", "CALL $ci - Reply status $rs $rr from $pr sip:$si:$sp\n");
    
    # case 2XX to 5XX
    } else if ( t_check_status("[2-5][0-9][0-9]") ) {
        xlog("L_INFO", "CALL $ci - Reply status $rs $rr from $pr sip:$si:$sp\n");
    }
    return;
}
