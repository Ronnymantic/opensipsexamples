####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

#set listen addresses
listen=udp:eth0:5060
listen=tcp:eth0:5060
advertised_address="<public_ip>"
advertised_port=5060
alias=public_ip

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

# set SIGNALING 
loadmodule "signaling.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

# StateLess module
loadmodule "sl.so"

# Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "pass_provisional_replies", 1)

# Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 1)

# Redis module
loadmodule "cachedb_redis.so"
modparam("cachedb_redis", "cachedb_url", "redis://<redis_ip>:6379/")
modparam("cachedb_redis", "connect_timeout",1000)
modparam("cachedb_redis", "query_timeout",1000)

# MAX ForWarD module
loadmodule "maxfwd.so"

# SIP MSG OPerationS module
loadmodule "sipmsgops.so"

# FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "/var/run/opensips/socket")

# URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0

# USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

# REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

loadmodule "avpops.so"
loadmodule "textops.so"
loadmodule "cfgutils.so"
loadmodule "json.so"

loadmodule "db_text.so"
modparam("db_text", "db_mode", 1)

# dispatcher module
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "text:///etc/opensips/dbtext")
modparam("dispatcher", "dst_avp", "$avp(271)")
modparam("dispatcher", "grp_avp", "$avp(272)")
modparam("dispatcher", "cnt_avp", "$avp(273)")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:$pr:ping@test.telephonyservice.com")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 20)
modparam("dispatcher", "ds_probing_threshhold", 2)

loadmodule "permissions.so"
loadmodule "uac.so"
loadmodule "uac_auth.so"
loadmodule "dialog.so"
loadmodule "exec.so"
loadmodule "regex.so"
loadmodule "rest_client.so"

modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

modparam("tm", "pass_provisional_replies", 1)

modparam("permissions", "db_url", "text:///etc/opensips/dbtext")

modparam("tm", "onreply_avp_mode", 1)
# AVP timer
modparam("tm", "restart_fr_on_each_reply", 1)

# exec
modparam("exec", "setvars", 1)
modparam("exec", "time_to_kill", 5)

modparam("rest_client", "curl_timeout", 5)
modparam("rest_client", "connection_timeout", 5)
modparam("rest_client", "connect_poll_interval", 2)
modparam("rest_client", "max_async_transfers", 300)


server_header="Server: Telephony service "
server_signature=no

route {
    if (!mf_process_maxfwd_header("20")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if ($ua=~"friendly-scanner"){
        xlog("L_NOTICE","Auth error for $fU@$fd from $Ri cause $var(auth_code)");
        xlog("FRIENDLY-SCANNER: UA: $ua From_TAG: $ft From_URI: $fu Received IP: $Ri IP Source: $si");
        exit;
    }

    if (!(method =~ "^(OPTIONS|NOTIFY|SUBSCRIBE)$")) {
        setflag(22);
    }

    if (!has_totag()) {
        # initial request
        record_route();
    } else {
        # sequential request - follow the set route
        if (loose_route()) {
            if (is_method("BYE")) {
                xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
                $avp(can_uri) = $ru;
                t_relay();
                exit;
            }
            if (is_method("INVITE|UPDATE|ACK")) {
                xlog("L_INFO", "CALL INVITE/UPDATE $ci loose route from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
        } else {
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
                    t_relay();
                    exit;
                } else {
                    xlog("L_INFO", "CALL ACK $ci without session from $pr sip:$si:$sp\n");
                    exit;
                }
            }
        }
    }

    # handle cancel and re-transmissions
    if (is_method("CANCEL")) {
        xlog("L_INFO", "CALL CANCELLED $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle ack and re-transmissions
    if (is_method("ACK")) {
        xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle options with 200 OK reply
    if (is_method("OPTIONS")) {
        xlog("L_INFO", "Got OPTIONS from $pr sip:$si:$sp - replying 200 OK");
        sl_send_reply("200", "OK");
        exit;
    }

    # handle MESSAGE from carrier
    if (is_method("MESSAGE")) {
        xlog("L_INFO", "NEW MESSAGE - $ci FROM $pr sip:$si:$sp\n");
        if (check_address("3", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "carriermessage")) {
            t_on_reply("INBOUND_MESSAGE"); # re-arm reply route
            route(INBOUND_MESSAGE);
            exit;
       }
    }

    # handle SIP INFO for DTMFs
    if (is_method("INFO")) {
        xlog("L_INFO", "Got INFO from $pr sip:$si:$sp");
        t_relay();
        exit;
    }

    # INVITE method
    if (is_method("INVITE")) {
        xlog("L_INFO", "NEW CALL - INITIAL INVITE $ci FROM $pr sip:$si:$sp\n");

		# -------------------------------------------------------------------------------------------
        # case INBOUND TRAFFIC - INVITE from carrier => inbound call
        if (check_address("2", "$si", "$sp", "$(pr{s.tolower})", "$avp(707)", "carrier")) {
            xlog("L_INFO", "<<< INBOUND CALL $ci - CARRIER $pr sip:$si:$sp - FROM $fu - TO $tu\n");
            route(INBOUND);
        # -------------------------------------------------------------------------------------------
        # others sources of INVITE are forbidden
        } else {
            xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
            sl_send_reply("403", "Forbidden");
            exit;
        }

    # REGISTER method
    } else if (is_method("REGISTER")) {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("503","Service Unavailable");
        exit;

    # other methods are forbidden
    } else {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("405","Method Not Allowed");
        exit;
    }

    # Route request
    if (!t_relay()) {
        xlog("L_ERR", "CALL $ci - Relay error\n");
        sl_reply_error();
        exit;
    }

}


# ROUTE FOR INBOUND CALLS
route[INBOUND] {
    xlog("L_INFO", "<<< INBOUND CALL $ci - Check Dispatcher\n");
    t_on_reply("INBOUND"); # Arm reply route
    # strip +
    if($rU =~ "^\+.*" )
        $rU=$(rU{s.substr,1,0});

    exec_avp("/etc/opensips/custom_route.sh $rU $si", "$avp(dsid)");

    if (pcre_match("$avp(dsid)", "^rU:")) {
        $var(destination) = $avp(dsid);
        $avp(dsid) = "0"; #use default dispatcher
        $var(oldrU) = $rU;
        $rU=$(var(destination){s.substr,3,0}); #change $rU
        append_hf("X-PH-OriginalTo: $var(oldrU)\r\n");
        xlog("L_INFO", "<<< INBOUND CALL $ci - Changing destination from $var(oldrU) to $rU\n");
    }

    if (($avp(dsid) == "0") || ($avp(dsid) == null)) {
            $avp(trunk_service_url) = "https://staging-trunk-use1.zt.plivops.com/zt/trunk/didmappings?didnumber="+$rU;
            $avp(dsid) = "2";
            route(ZENTRUNK_INBOUND);
    } else {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Found Custom Dispatcher $avp(dsid) for $rU\n");
    }
    route(INBOUND_MEDIASERVER);
}

route[VOICE_INBOUND] {
    route(TO_USER_RATE_LIMITER);

    if($retcode == -1) {
        xlog("L_WARN","Callid $ci - $rU : rate limit reached for the DID\n");
        append_hf("Retry-After: 120\n");
        sl_send_reply("486","User Busy");
        exit;
    }

    route(ACC_BASED_RATE_LIMITER);
}

route[INBOUND_MEDIASERVER] {
    if (pcre_match("$avp(dsid)", "^sip:")) {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Found Dispatcher to sipuri $avp(dsid)\n");
        $ru=$avp(dsid);
        xlog("L_INFO", "<<< INBOUND CALL $ci - Dispatching to $ru");
        $T_fr_timeout = 10;
        append_hf("X-PlivoMediaServer: $ru\r\n");
        append_hf("X-PlivoInboundGateway: sip:$si:$sp\r\n");
    } else {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Found Dispatcher $avp(dsid) for $rU\n");
        $avp(dsid) = $(avp(dsid){s.int});
        if (ds_select_domain("$avp(dsid)", "4")) {
            xlog("L_INFO", "<<< INBOUND CALL $ci - Dispatching to route ID $avp(dsid) $ru");
            append_hf("X-PlivoMediaServer: $ru\r\n");
            append_hf("X-PlivoInboundGateway: sip:$si:$sp\r\n");
            $T_fr_timeout = 10;
            return;
        }
        xlog("L_ERR", "<<< INBOUND CALL $ci - Dispatch failure to route ID $avp(dsid)");
        # Try fallback route US EAST or WEST
        if ($avp(dsid) == 2) {
            $avp(dsid) = 1;
        } else {
            $avp(dsid) = 2;
        }
        if (ds_select_domain("$avp(dsid)", "4")) {
            xlog("L_INFO", "<<< INBOUND CALL $ci - Dispatching to fallback route ID $avp(dsid) $ru");
            append_hf("X-PlivoMediaServer: $ru\r\n");
            append_hf("X-PlivoInboundGateway: sip:$si:$sp\r\n");
            $T_fr_timeout = 10;
            return;
        }
        xlog("L_ERR", "<<< INBOUND CALL $ci - Dispatch failure returning 503 Service Unavailable");
        sl_send_reply("503", "Service Unavailable");
        exit;
    }
}

route[INBOUND_RELAY]
{
    if (!t_relay()) {
            xlog("L_ERR", "CALL $ci - Relay error\n");
            sl_reply_error();
            exit;
    }
}
# REPLY ROUTE FOR INBOUND CALLS
onreply_route[INBOUND] {
    # remove our custom headers before sending to carrier :
    # packet fragmentation may cause issues with Sonus ...
    remove_hf("^X-Plivo*", "r");
    remove_hf("^X-CallUUID*", "r");
    # case state 100 Trying, set pdd timer
    if ( t_check_status("100") ) {
        # set try timeout to 10 seconds
        xlog("L_INFO", "<<< INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp - set FR timer to 10s \n");
        $T_fr_timeout = 10;
    # case state 180, reset timer
    } else if (t_check_status("18[0-9]")) {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp - set FR timer to 120s\n");
        $T_fr_timeout = 120;
    # case 200, remove Remote-Party-ID (some ULC are buggy)
    } else if ( t_check_status("200") ) {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp\n");
        remove_hf("Remote-Party-ID");
    # case 2XX to 5XX
    } else if ( t_check_status("[2-5][0-9][0-9]") ) {
        xlog("L_INFO", "<<< INBOUND CALL $ci - Got $rs $rr from $pr sip:$si:$sp\n");
    }
    return;
}

route[TO_USER_RATE_LIMITER] {
  # inbound rate limiting based upon DID
  $var(reg_input) = $rU;
  $var(reg) = "/[+-.\"]//g";
  $avp(sanitized_rU) = $(var(reg_input){re.subst,$var(reg)});
  $var(second) = $time(%s);
  $var(key_time) = ($(var(second){s.int}))/3;
  $var(key) = "invites:to_user:" + $var(key_time) + ":" + $avp(sanitized_rU);

  if(cache_counter_fetch("redis", "$var(key)", $var(result))) {
    if($var(result) > 150) {
      return(-1);
    } else {
      cache_add("redis", "$var(key)", 1, 3);
      return(1);
    }
  } else {
    cache_add("redis", "$var(key)", 1, 3);
    return(1);
}
}

route[ACC_BASED_RATE_LIMITER] {
  # inbound rate limiting based upon Account
  $var(clango_url) = "https://vad3r:vad3r1sc00l@clango-staging-read.voice.plivodev.com/api/v1/GetNumberDetails/" + $avp(sanitized_rU) + "/";
# Value is stored in comma seperated format like: AccID,isActive,InboundCPS
 cache_raw_query("redis","GET $avp(sanitized_rU)","$avp(redis_result)");
  if ($avp(redis_result)) {
    xlog("L_INFO", "<<< VOICE INBOUND $ci got value from redis for $avp(sanitized_rU), value is $avp(redis_result)\n");
    $avp(account_id) = $(avp(redis_result){s.select,0,,});
    $avp(is_active) = $(avp(redis_result){s.select,1,,});
    $avp(inbound_cps) = $(avp(redis_result){s.select,2,,});
    route(CHECK_CPS);
    if($retcode == -1) {
        append_hf("Retry-After: 120\n");
        sl_send_reply("486","User Busy");
        exit;
    }
  }
  else {
        xlog("L_INFO", "<<< VOICE INBOUND $ci querying to clango url for $avp(sanitized_rU)\n");
        async(rest_get("$var(clango_url)", "$var(json_clango_response)", "$var(ct)", "$var(rcode)"), CLANGO_RESUME);
    }
}

route [CHECK_CPS] {
    #checking account based CPS
    if ($avp(is_active) == "true")
    {
# Taking 3 seconds sliding window for calculating CPS, so the CPS we are checking is 3 times actual CPS allocated to account
    $var(second) = $time(%s);
    $var(key_time) = ($(var(second){s.int}))/3;
    $var(key) = "invites:account:" + $var(key_time) + ":" + $avp(account_id);
    $var(int_inbound_cps) = ($(avp(inbound_cps){s.int}))*3;

        if(cache_counter_fetch("redis", "$var(key)", $var(result))) {
            if($var(result) > $var(int_inbound_cps)) {
        xlog("L_WARN","Callid $ci - $rU : rate limit reached for the account\n");
                return(-1);
            } else {
                cache_add("redis", "$var(key)", 1, 3);
                route(INBOUND_MEDIASERVER);
            }
        } else {
            cache_add("redis", "$var(key)", 1, 3);
            route(INBOUND_MEDIASERVER);
        }
    } else {
        xlog("L_ERR", "<<< $ci: $rU number is inactive\n");
        return(-1);
    }
}

# adding key in redis if clango responds with account details
route [CLANGO_RESUME] {
    $var(rc) = $rc;
    if ($var(rc) < 0) {
        xlog("L_ERR", "<<< VOICE INBOUND $ci failed clango response: value of rc is $var(rc) for $avp(sanitized_rU): fallback to original callflow\n");
        route(INBOUND_MEDIASERVER);
    }else if ($var(rcode) ==  0) {
        xlog("L_ERR", "<<< VOICE INBOUND $ci failed clango response: value of rcode is $var(rcode) for $avp(sanitized_rU) : fallback to original callflow\n");
        route(INBOUND_MEDIASERVER);
    }else if ($var(rcode) == 404) {
        xlog("L_INFO", "<<< VOICE INBOUND $ci clango responded with $var(rcode) for $avp(sanitized_rU): not a Voice DID, sending 486 User Busy\n");
        route(INBOUND_MEDIASERVER);
    }else if ($var(rcode) >= 300) {
    xlog("L_INFO", "<<< VOICE INBOUND $ci clango responded with $var(rcode) for $avp(sanitized_rU): Clango is not available\n");
    route(INBOUND_MEDIASERVER);
    }else if ($var(rcode) == 200) {
    xlog("L_INFO", "<<< VOICE INBOUND $ci clango responded with $var(rcode): for $avp(sanitized_rU) voice DID with response $var(json_clango_response)\n");
    $json(clango_response) := "{}";
    $json(clango_response) := $var(json_clango_response);
    $avp(account_id) = $json(clango_response/account_id);
    $avp(is_active) = $json(clango_response/is_active);
    $avp(inbound_cps) = $json(clango_response/inbound_cps);
# Value is stored in comma seperated format like: AccID,isActive,InboundCPS
    $var(value) = $avp(account_id) + "," + $avp(is_active) + "," + $avp(inbound_cps);
    cache_raw_query("redis","SETEX $avp(sanitized_rU) 1800 $var(value)");
    route(CHECK_CPS);
    if($retcode == -1) {
        append_hf("Retry-After: 120\n");
            sl_send_reply("486","User Busy");
            exit;
        }
    }
    route(INBOUND_RELAY);
}

# ROUTE FOR INBOUND MESSAGE
route[INBOUND_MESSAGE] {
    xlog("L_INFO", "<<< INBOUND MESSAGE $ci - CARRIER $pr sip:$si:$sp $pr - FROM $fu - TO $tu\n");
    if (ds_select_domain("7", "4")) {
        xlog("L_INFO", "<<< INBOUND MESSAGE $ci - Dispatching to $ru");
        append_hf("X-PlivoMediaServer: $ru\r\n");
        append_hf("X-PlivoInboundGateway: sip:$si:$sp\r\n");
        if (!t_relay()) {
            xlog("L_ERR", "CALL $ci - Relay error\n");
            sl_reply_error();
            exit;
        }
    } else {
        xlog("L_ERR", "<<< INBOUND MESSAGE $ci - Dispatch failure");
        sl_send_reply("503", "Dispatch failure");
        exit;
    }
}

# REPLY ROUTE FOR INBOUND MESSAGES
onreply_route[INBOUND_MESSAGE]
{
    xlog("L_INFO", "<<< INBOUND MESSAGE $ci - Got $rs $rr\n");
}

route[ZENTRUNK_INBOUND] {
    xlog("L_INFO", "<<< ZENTRUNK INBOUND $ci querying to trunk service url : $avp(trunk_service_url)");
    async(rest_get("$avp(trunk_service_url)", "$var(json_trunk_response)", "$var(ct)", "$var(rcode)"), ZENTRUNK_RESUME);
}
route[ZENTRUNK_RESUME] {
    if ($rc < 0) {
        #need to keep scalyr alert for this
        xlog("L_ERR", "<<< ZENTRUNK INBOUND $ci failed response:$var(rcode) with trunk service api url: $avp(trunk_service_url): fallback to original callflow");
        route(VOICE_INBOUND);
    }else if ($var(rcode) >= 300) {
        xlog("L_INFO", "<<< ZENTRUNK INBOUND $ci responded with $var(rcode): not a zentrunk DID");
        route(VOICE_INBOUND);
    }else if ($var(rcode) == 200) {
        xlog("L_INFO", "<<< ZENTRUNK INBOUND $ci responded with $var(rcode): zentrunk DID with response $var(json_trunk_response)");
        $json(trunk_response) := "{}";
        $json(trunk_response) := $var(json_trunk_response);
        $avp(trunk_domain) = $json(trunk_response/trunk_domain);
        $ru = "sip:"+$rU+"@"+$avp(trunk_domain);
        append_hf("X-PlivoZTDirection: inbound\r\n");
        append_hf("X-PlivoInboundGateway: $si\r\n");
        $T_fr_timeout = 10;
    }
    route(INBOUND_RELAY);
}


# GLOBAL ERROR ROUTE
error_route {
    xlog("--- error route class=$(err.class) level=$(err.level) info=$(err.info) rcode=$(err.rcode) rreason=$(err.rreason) ---\n");
    xlog("--- error from [$si:$sp]\n+++++\n$mb\n++++\n");
    sl_send_reply("$err.rcode", "$err.rreason");
    exit;
}
