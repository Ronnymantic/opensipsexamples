# OpenSIPS proxy

####### Global Parameters #########

log_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

children=4

/* uncomment the following lines to enable debugging */
debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases based on reverse DNS on IPs */
#auto_aliases=no


listen=udp:<opensips_pvtip>:5060 

####### Modules Section ########

#set module path
mpath= "/home/ubuntu/opensips/altanaicustom4/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"
         
#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"  
        
#### FIFO Management Interface
loadmodule "mi_fifo.so" 
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module 
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)
#modparam("usrloc", "working_mode_preset", "single-instance-no-db")
    
#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* do not adjust the direct of the sequential requests.
   if enabling this parameter, enable "append_fromtag" in "rr" module too */
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route{
    # $rm - requst method
    xlog(" SIP request methods - $rm \n");

    #$si - reference to IP source address 
    #$sp - ref to source port 
    xlog("from $pr sip:$si:$sp \n");

    # $tu - to UTI
    xlog("for $tu \n");

    if (!mf_process_maxfwd_header("10")) {
        send_reply("483","Too Many Hops");
        exit;
    }

    # first msg of dialog has no to tag , thus block is meant for subsequent msgs , not the first 
    if (has_totag()) {

        # handle hop-by-hop ACK (no routing required)
        if ( is_method("ACK") && t_check_trans() ) {
                t_relay();
                exit;
        }

        # sequential request within a dialog should take the path determined by record-routing
        if ( !loose_route() ) {
                # record-routing for all our traffic is done , so should not receive any sequential requests without Route hdr.
                send_reply("404","Not here");
                exit;
        }

        if (is_method("BYE")) {
                # do accounting even if the transaction fails
                do_accounting("log","failed");
        }

        # route it out to whatever destination was set by loose_route() in $du (destination URI).
        route(relay);
        exit;
    }

    # CANCEL processing
    if (is_method("CANCEL")) {
            if (t_check_trans())
                t_relay();
            exit;
    }

    # absorb retransmissions, but do not create transaction
    t_check_trans();

    if ( !(is_method("REGISTER")  ) ) {

        # $fd - from URI domain
        # $rd - request URI domain

        xlog(" For non-REGISTER requests check if the source or destination is local \n ");
        xlog(" caller URI $fu \n");
        xlog(" callee URI $ru \n");

        #if (is_myself("$fd")) {
        if($fu==myself){
                # if caller is local    
                xlog("Caller is fro local URI domain \n");        
        } else {
                # if caller is not local, then called number must be local                        
                if(uri==myself){
                        xlog(" Callee is from local URI domain \n ");
                }else{
                        xlog(" Neither from URI nor called URI is local/myself to opensips Server \n");
                }
        }
    }

    # preloaded route checking
    if (loose_route()) {
        xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
        if (!is_method("ACK"))
                send_reply("403","Preload Route denied");
        exit;
    }

    # record routing
    if (!is_method("REGISTER|MESSAGE"))
        record_route();

    # account only INVITEs
    if (is_method("INVITE")) {
        do_accounting("log");
    }

    if(uri==myself){
        xlog(" Request URI is myself , hence it is meant for local processing \n");
    }else{
        xlog(" Request URI is different , possibly outbound , append header \n ");
        append_hf("P-hint: outbound\r\n"); 
        route(relay);
    }

    # requests for my domain
    if (is_method("PUBLISH|SUBSCRIBE")) {
        xlog(" We do not support PUBLISH/SUBSCRIBE \n ");
        send_reply("503", "Service Unavailable");
        exit;
    }

    if (is_method("REGISTER")) {
        xlog(" Proxy does not support REGISTER \n ");
        send_reply("503", "Service Unavailable");
        exit;
    }

    if ($rU==NULL) {
        # request with no Username in RURI
        send_reply("484","Address Incomplete");
        exit;
    }

    # do lookup with method filtering
    if (!lookup("location","m")) {
        t_reply("404", "Not Found");
        exit;
    }

    # when routing via usrloc, log the missed calls also
    do_accounting("log","missed");
    route(relay);
}


route[relay] {
    # for INVITEs enable some additional helper routes
    if (is_method("INVITE")) {
        xlog(" set blocks for INVITE \n ")
        t_on_branch("per_branch_ops");
        t_on_reply("handle_nat");
        t_on_failure("missed_call");
    }

    # trelay error returncode 
    # 1  generic internal error
    # -2  bad message (parsing errors)
    # -3  no destination available (no branches were added or request already cancelled)
    # -4 - bad destination (unresolvable address)
    # -5 - destination filtered (black listed)
    # -6 - generic send failed
    if (!t_relay()) {
            send_reply("500","Internal Error");
    }
    # cal also do t_relay("tcp:<speciic_server_ip>:5060")
    exit;
}

branch_route[per_branch_ops] {
    xlog("$ci new branch at $ru\n");
}

onreply_route[handle_nat] {
    xlog("$ci incoming reply\n");
}

failure_route[missed_call] {
    if (t_was_cancelled()) {
            exit;
    }

    # uncomment the following lines if you want to block client redirect based on 3xx replies.
    ##if (t_check_status("3[0-9][0-9]")) {
    ##t_reply("404","Not found");
    ##      exit;
    ##}
}
