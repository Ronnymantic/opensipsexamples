# Opensips 

####### Global Parameters #########

children=16
tcp_children=4
#log_stderror=yes
fork=yes
debug=3

# DEBUG stdout
# log_stderror=yes
# fork=no
# deug=6

log_facility=LOG_LOCAL0

listen=udp:eth0:5060
listen=tcp:eth0:5060
advertised_address="<pub_ip>"
advertised_port=5060
alias="<pub_ip>:5060"

# tcp parameteres
# uncomment the next line to disable TCP (default on)
# disable_tcp=yes
tcp_connect_timeout=5000
tcp_connection_lifetime=3605
tcp_max_connections=25000

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"
#loadmodule "proto_udp.so" # loads the UDP protocol module
#loadmodule "proto_tcp.so" # loads the TCP protocol module

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "pass_provisional_replies", 1)
modparam("tm", "disable_6xx_block", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#loadmodule "mi_datagram.so"
#modparam("mi_datagram", "socket_name", "/var/run/opensips/socket")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USER Location module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### ACCounting module
loadmodule "acc.so"

loadmodule "avpops.so"
loadmodule "textops.so"
loadmodule "cfgutils.so"
loadmodule "db_postgres.so"

loadmodule "uac.so"
loadmodule "uac_auth.so"
loadmodule "dialog.so"
loadmodule "exec.so"
loadmodule "regex.so"

server_header="Server: sbc"
server_signature=no

route {

    if (!mf_process_maxfwd_header("20")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if ($ua=~"friendly-scanner") {
        xlog("L_NOTICE","Auth error for $fU@$fd from $Ri cause $var(auth_code)");
        xlog("FRIENDLY-SCANNER: UA: $ua From_TAG: $ft From_URI: $fu Received IP: $Ri IP Source: $si");
        exit;
    }

    record_route();
    if (has_totag()) {
        # sequential request - obey the indicated route
        if (loose_route()) {
            if (is_method("BYE")) {
                xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
                $avp(can_uri) = $ru;
                t_relay();
                exit;
            }
            if (is_method("INVITE")) {
                xlog("L_INFO", "CALL INVITE $ci loose route from $pr sip:$si:$sp\n");
                t_relay();
                exit;
            }
        } else {
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
                    t_relay();
                    exit;
                } else {
                    xlog("L_INFO", "CALL ACK $ci without session from $pr sip:$si:$sp\n");
                    exit;
                }
            }
        }
    }

    # handle cancel and re-transmissions
    if (is_method("CANCEL")) {
        xlog("L_INFO", "CALL CANCELLED $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle ack and re-transmissions
    if (is_method("ACK")) {
        xlog("L_INFO", "CALL ACK $ci from $pr sip:$si:$sp\n");
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # handle bye and re-transmissions
    if (is_method("BYE")) {
        xlog("L_INFO", "CALL BYE $ci from $pr sip:$si:$sp\n");
        t_relay();
        exit;
    }

    # relay INFO
    if (is_method("INFO")) {
        xlog("L_INFO", "CALL INFO $ci from $pr sip:$si:$sp\n");
        t_relay();
        exit;
    }

    if (is_method("OPTIONS")) {
        xlog("L_INFO", "Got OPTIONS from $pr sip:$si:$sp - replying 200 OK");
        sl_send_reply("200", "OK");
        exit;
    }

    # INVITE method
    if (is_method("INVITE")) {
        xlog("L_INFO", "NEW CALL - INITIAL INVITE $ci FROM $pr sip:$si:$sp\n");
        
        route(OUTBOUND); 
        t_on_failure("OUTBOUND"); # Set failure route
        t_on_branch("OUTBOUND"); # Set branch route
        t_on_reply("OUTBOUND"); # Set reply route

        # do branches
        serialize_branches(2);
        if(!next_branches()) {
            xlog("L_ERR", ">>> OUTBOUND CALL $ci - No branches found\n");
            sl_send_reply("503", "No branches");
            exit;
        }

        # ring timeout
        $var(y) = $(ru{param.value,timeout});
        if (!$var(y)) {
            $avp(ringtimeout) = 120; # set default ring timeout to 120 seconds
        } else {
            $var(z) = $(var(y){s.int});
            if ($var(z) < 10) {
                $avp(ringtimeout) = 10; # Set minimal ring timeout to 10 seconds
            } else {
                $avp(ringtimeout) = $var(z); # Set ring timeout
            }
        }
        $ru = $avp(ruri);

        $avp(currentoutbound) = " CALL " + $ci + " FROM " + $fu + " - RURI " + $ru + " -";
        xlog("L_INFO", "$avp(currentoutbound) Trying first $avp(ruri)\n");

    # REGISTER method
    } else if (is_method("REGISTER")) {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("503","Service Unavailable");
        exit;

    # UPDATE method
    } else if (is_method("UPDATE")) {
        xlog("CALL $ci - Relaying UPDATE");
        t_relay();
        exit;

    # BYE method
    } else if (is_method("BYE")) {
        xlog("CALL $ci - Relaying BYE");
        t_relay();
        exit;

    # other methods are forbidden
    } else {
        xlog("L_ERR", "METHOD $rm FORBIDDEN $pr sip:$si:$sp\n");
        sl_send_reply("405","Method Not Allowed");
        exit;
    }

    # Route request
    if (!t_relay()) {
        xlog("L_ERR", "CALL $ci - Relay error\n");
        sl_reply_error();
        exit;
    }
}

# ROUTE FOR OUTBOUND CALLS
route[OUTBOUND] {
    xlog("L_INFO", " CALL $ci - Check Gateways Routes\n");

    # give gateways here 
    $var(x) = "sip:9876789876@<gateway1_ip>^sip:1111111111@<gateway2_ip>";
    xlog("L_INFO", " Gateways $var(x) \n");

    $var(gw_index) = 0;
    $var(br_index) = 0;

    # loop through the list of gateways seprated by special chareter ^
    while ($var(gw_index) < 100) {
        $var(uri) = $(var(x){s.select,$var(gw_index),^});
        if (($var(uri) == "") || ($var(uri) == null)) {
            $avp(outboundcount) = $var(br_index);
            $avp(gw_count) = $var(br_index);
            $avp(gw_failure_count) = 0;
            xlog("L_INFO", " CALL $ci - Found $avp(outboundcount) Gateways\n");
            return;
        } else {
            $var(is_dns_resolved) = 0;
            $var(ruri_count) = 1;

            $var(itr) = 0;
            while($var(itr) < $var(ruri_count)) {

                $var(uri) = $(var(carrierdetails){s.select,0,@}) + "@" + $(avp(ip_string){s.select,$var(itr),#}) +
                ";" + $(var(uri){s.select,1,;}) ;

                append_branch();
                $(branch(uri)[$var(br_index)]) = $var(uri);
                $(branch(q)[$var(br_index)]) =  1000 - ($var(br_index) * 100);
                xlog("L_INFO", " CALL $ci - Added branch URI $(branch(uri)[$var(br_index)]) - Q $(branch(q)[$var(br_index)])\n");
                $var(br_index) = $var(br_index) + 1;
                $var(itr) = $var(itr) + 1;
            }
            $var(gw_index) = $var(gw_index) + 1;
        }
    }
    
}


# REPLY ROUTE FOR OUTBOUND CALLS
onreply_route[OUTBOUND]
{
    # Dont try next destination if call is cancelled
    if (t_was_cancelled()) {
        $avp(is_gw_success) = "true";
        xlog("L_INFO", "$avp(currentoutbound) CANCELLED\n");
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
        }
        exit;
    }

    # For 100 Trying, set pdd timer
    if ( t_check_status("100") ) {
        # set try timeout to 10 seconds
        xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp - set FR timer to 10s\n");
        $T_fr_timeout = 10;

    # For 18X, reset timer
    } else if (t_check_status("18[0-9]")) {
        # Always consider SIP response 18X as success 
        $avp(is_gw_success) = "true";
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_INFO", " call $ci $fu RURI=$avp(ruri) 
                                        Gateway Failure count = $avp(gw_failure_count) 
                                        Gateway Count = $avp(gw_count) 
                                        call_success= $rs\n");
        }
        if ($avp(ispddset) == "false") {
            if (!is_avp_set("$avp(ringtimeout)") ) {
                # default PDD timer (120 seconds)
                $avp(ringtimeout) = 120;
            }
            $T_fr_timeout = $avp(ringtimeout);
            $avp(ispddset) = "true";
            xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp - set FR timer to $avp(ringtimeout)s\n");
        } else {
            xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp - FR timer already set\n");
        }

    # Always consider SIP response 2XX as success
    } else if ( t_check_status("20[0-9]") ) {
        $avp(is_gw_success) = "true";
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_INFO", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_success|$rs\n");
        }
        xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp\n");

    # Always consider SIP responses 482, 483, 486, 487 as success
    } else if (t_check_status("482|483|486|487")) {
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_INFO", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_success|$rs\n");
        }
        $avp(is_gw_success) = "true";
        xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp\n");
    
    # Do not change status of gateway if SIP responses 3XX 4XX 5XX 6XX
    } else if (t_check_status("[3-6][0-9][0-9]")) {
        xlog("L_INFO", "$avp(currentoutbound) Got $rs $rr from $pr sip:$si:$sp\n");
    }

    return;
}

# BRANCH ROUTE FOR OUTBOUND CALLS
branch_route[OUTBOUND] {
    # request with no From name in From header
    if ($fn == NULL) {
       xlog("L_INFO", "from name is null for $ci\n");
       $avp(display_name) = $fU;
    } else {
       $avp(display_name) = $fn;
    }

    remove_hf("To");
    append_hf("To: <$ru>\r\n", "From");

    $avp(checkring) = 0;
    $avp(ispddset) = "false";
    xlog("L_INFO", "$avp(currentoutbound) entering branch\n");
}

# FAILURE ROUTE FOR OUTBOUND CALLS
failure_route[OUTBOUND] {
    if (t_was_cancelled()) {
        # Dont try next gateway if call is cancelled
        $avp(is_gw_success) = "true";
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_INFO", "stat|outbound|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|call_cancelled|0\n");
        }
        xlog("L_INFO", "$avp(currentoutbound) CANCELLED\n");
        exit;
    }


    if (t_check_status("482|483|486|487")) {
        # NCLI mode (always do failover except when receiving SIP 200 from gateway)
        if ($avp(is_ncli) == "true") {
            xlog("L_INFO", "$avp(currentoutbound) Got 482|483|486|487 for NCLI user from $pr sip:$si:$sp, set as failure\n");
            $avp(is_gw_success) = "false";
        # PSTN and SIP destinations are accepting 482|483|486|487 SIP responses as success
        } else {
            xlog("L_INFO", "$avp(currentoutbound) Got 482|483|486|487 from $pr sip:$si:$sp, set as success\n");
            $avp(is_gw_success) = "true";
        }
    }

    if ($avp(is_gw_success) == "true") {
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_INFO", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_success|0\n");
        }
        xlog("L_INFO", "$avp(currentoutbound) call to gateway succeeded or cancelled, no failover\n");
        drop();
        exit;
    }



    # Load the next gateway from next branch
    $avp(gw_failure_count) = $avp(gw_failure_count) + 1;
    $avp(outboundcount) = $avp(outboundcount) - 1;
    if ($avp(outboundcount) == 0) {
        xlog("L_ERR", "$avp(currentoutbound) FAILURE\n");
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_ERR", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_failed|0\n");
        }
        xlog("L_ERR", "$avp(currentoutbound) Tried all gateways, no more branches to try\n");
        drop();
        exit;
    }
    xlog("L_ERR", "$avp(currentoutbound) call to gateway failed, doing failover\n");
    serialize_branches(1);
    if (!next_branches()) {
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_ERR", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_failed|0\n");
        }
        xlog("L_ERR", "$avp(currentoutbound) FAILURE\n");
        xlog("L_ERR", "$avp(currentoutbound) Tried all gateways, no more branches to try\n");
        drop();
        exit;
    }

    # always reset gateway status before trying next gateway
    $avp(is_gw_success) = "false";

    $avp(currentoutbound) = ">>> OUTBOUND CALL " + $ci + " FROM " + $fu + " - RURI " + $ru + " -";
    $avp(outbounduri) = $ru;
    $var(y) = $(ru{param.value,timeout});
        if (!$var(y)) {
        $avp(ringtimeout) = 120; # set default ring timeout to 120 seconds
    } else {
        $var(z) = $(var(y){s.int});
        if ($var(z) < 10) {
            $avp(ringtimeout) = 10; # Set minimal ring timeout to 10 seconds
        } else {
            $avp(ringtimeout) = $var(z); # Set ring timeout
        }
    }
    $avp(ruri) = $(ru{s.select,0,;});
    $avp(lastcarrierid) = $avp(carrierid);

    $avp(carrierid) = $(ru{param.value,carrierid});
    xlog("L_INFO", "FAILURE ROUTE OUTBOUND avp  carrierid $avp(carrierid)  \n");

    $avp(carrierids_used) = $avp(carrierids_used) + ";" + $avp(carrierid);
    $avp(carrierrate) = $(ru{param.value,carrierrate});
    $avp(cloudrate) = $(ru{param.value,cloudrate});
    $T_fr_timeout = 5;

    # Proxy code deprecated
    $avp(hasproxy) = $(ru{param.exist,proxy});
    if ($(avp(hasproxy))) {
        if ($avp(lastcarrierid)==$avp(carrierid)) {
            if (t_check_status("5[0-9][0-9]")) {
                xlog("L_INFO", "$avp(currentoutbound) trying to use custom proxy with same carrier $avp(carrierid) after a 5XX reply, drop branch $ru\n");
                drop();
                exit;
            }
        }
        $avp(proxy) = $(ru{param.value,proxy});
        $avp(tonumber) = $(ruri{s.select,0,@});
        $avp(ruri) = $avp(tonumber) + "@" + $avp(proxy);
        $var(i) = 0;
        $avp(plivo_gateway_header) = "";
        $var(uri) = $(ruri{s.select,$var(i),;});
        while (!($var(uri) == "") && !($var(uri) == null)) {
            $var(proxyparam) = $(var(uri){s.select,0,=});
            $var(proxycompare) = "proxy";
            if (!($var(proxyparam)==$var(proxycompare))) {
                if($var(i)==0)
                    $avp(plivo_gateway_header) = $avp(plivo_gateway_header) + $var(uri);
                else
                    $avp(plivo_gateway_header) = $avp(plivo_gateway_header) + ";" + $var(uri);
            }
            $var(i) = $var(i) + 1;
            $var(uri) = $(ruri{s.select,$var(i),;});
        }
        xlog("L_INFO", "$avp(currentoutbound) using custom proxy gateway $avp(plivo_gateway_header)\n");
    }

    # Proceed with next gateway
    $ru = $avp(ruri);
    $avp(currentoutbound) = ">>> OUTBOUND CALL " + $ci + " FROM " + $fu + " - RURI " + $ru + " -";
    t_on_failure("OUTBOUND"); ## re-arm failure route
    t_on_branch("OUTBOUND"); # re-arm branch route
    t_on_reply("OUTBOUND"); # re-arm reply route

    xlog("L_INFO", "$avp(currentoutbound) trying next gateway using RURI $avp(ruri)\n");
    if (!t_relay()) {
        if ($avp(is_gw_stat_sent) == "false") {
            $avp(is_gw_stat_sent) = "true";
            xlog("L_ERR", "stat|outbound|$avp(plivo_auth_id)|$ci|$fu|$avp(ruri)|$avp(gw_failure_count)|$avp(gw_count)|$avp(carrierids_used)|call_failed|0\n");
        }
        xlog("L_ERR", "$avp(currentoutbound) relay failure to $avp(ruri)\n");
    }
}

# GLOBAL ERROR ROUTE
error_route {
    xlog("--- error route class=$(err.class) level=$(err.level) info=$(err.info) rcode=$(err.rcode) rreason=$(err.rreason) ---\n");
    xlog("--- error from [$si:$sp]\n+++++\n$mb\n++++\n");
    sl_send_reply("$err.rcode", "$err.rreason");
    exit;
}